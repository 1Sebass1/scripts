local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- Remote function
local GetServers = ReplicatedStorage:WaitForChild("PrivateServers"):WaitForChild("GetServers")

-- API URLs
local API_URL_STATUS = "http://157.245.80.25:5000/status"
local API_URL_INFO = "http://157.245.80.25:5000/info"

-- Detect which request function is available
local request_func = (syn and syn.request) or http_request or (fluxus and fluxus.request) or krnl_request or request
if not request_func then
    warn("No HTTP request function available in this executor.")
    return
end

-- Optional: Pretty-print for debugging
local function printServersPretty(servers)
    for serverId, serverData in pairs(servers) do
        print("Server ID:", serverId)
        for key, value in pairs(serverData) do
            print("  " .. key .. ": ", value)
        end
        print("------------------------")
    end
end

-- Run the loop asynchronously
task.spawn(function()
    while true do
        wait(1) -- Keeps the loop from locking the main thread

        task.spawn(function()  -- Offload blocking work to another thread
            local success, response = pcall(function()
                return request_func({
                    Url = API_URL_STATUS,
                    Method = "GET"
                })
            end)

            if success and response.Success then
                local statusData = HttpService:JSONDecode(response.Body)
                if statusData.run_now == true then
                    print("Received signal from API. Getting server list...")

                    -- Invoke remote to get all servers
                    local servers = GetServers:InvokeServer()
                    printServersPretty(servers)

                    -- Send the server data as JSON
                    local json_body = HttpService:JSONEncode({ servers = servers })
                    pcall(function()
                        request_func({
                            Url = API_URL_INFO,
                            Method = "POST",
                            Headers = { ["Content-Type"] = "application/json" },
                            Body = json_body
                        })
                    end)
                end
            else
                warn("Failed to connect to the local API. Make sure the local_api.py script is running.")
            end
        end)
    end
end)
