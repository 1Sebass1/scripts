local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")

-- Remote function
local GetServers = ReplicatedStorage:WaitForChild("PrivateServers"):WaitForChild("GetServers")

-- API URLs
local API_URL_STATUS = "http://157.245.80.25:5000/status"
local API_URL_INFO = "http://157.245.80.25:5000/info"

-- Detect which request function is available
local request_func = (syn and syn.request) or http_request or (fluxus and fluxus.request) or krnl_request or request
if not request_func then
    warn("No HTTP request function available in this executor.")
    return
end

-- Create white GUI overlay
local screenGui = Instance.new("ScreenGui")
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

local whiteFrame = Instance.new("Frame")
whiteFrame.Size = UDim2.new(1, 0, 1, 0)
whiteFrame.BackgroundColor3 = Color3.new(1, 1, 1)
whiteFrame.BorderSizePixel = 0
whiteFrame.Parent = screenGui

-- Remove all textures for minimal lag
for _, obj in pairs(Workspace:GetDescendants()) do
    if obj:IsA("Texture") or obj:IsA("Decal") then
        obj:Destroy()
    elseif obj:IsA("Part") or obj:IsA("MeshPart") then
        obj.Material = Enum.Material.SmoothPlastic
        obj.Reflectance = 0
        obj.Color = Color3.new(1, 1, 1)
    end
end

-- Optional: disable shadows, lighting, and effects
Lighting.GlobalShadows = false
Lighting.FogEnd = 9e9
Lighting.Brightness = 3
Lighting.ClockTime = 12

-- Optional: print for debugging
local function printServersPretty(servers)
    for serverId, serverData in pairs(servers) do
        print("Server ID:", serverId)
        for key, value in pairs(serverData) do
            print("  " .. key .. ": ", value)
        end
        print("------------------------")
    end
end

-- Main loop
while wait(1) do
    local success, response = pcall(function()
        return request_func({
            Url = API_URL_STATUS,
            Method = "GET"
        })
    end)

    if success and response.Success then
        local statusData = HttpService:JSONDecode(response.Body)

        if statusData.run_now == true then
            print("Received signal from API. Getting server list...")
            local servers = GetServers:InvokeServer()
            printServersPretty(servers)

            local json_body = HttpService:JSONEncode({ servers = servers })
            pcall(function()
                request_func({
                    Url = API_URL_INFO,
                    Method = "POST",
                    Headers = { ["Content-Type"] = "application/json" },
                    Body = json_body
                })
            end)
        end
    else
        warn("Failed to connect to the local API. Make sure the local_api.py script is running.")
    end
end
